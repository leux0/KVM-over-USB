import platform

from PySide6.QtCore import Qt
from PySide6.QtGui import QKeyEvent

# 参考资料
# https://github.com/nyanpasu64/qkeycode/tree/master
# https://doc.qt.io/qt-6/qt.html#Key-enum


QT_KEY_VALUE_TO_HID_CODE: dict[int, int] = {
    Qt.Key.Key_Escape: 0x29,
    Qt.Key.Key_Tab: 0x2B,
    Qt.Key.Key_Backspace: 0x2A,
    Qt.Key.Key_Return: 0x28,
    Qt.Key.Key_Enter: 0x58,
    Qt.Key.Key_Insert: 0x49,
    Qt.Key.Key_Delete: 0x4C,
    Qt.Key.Key_Pause: 0x48,
    Qt.Key.Key_Print: 0x46,
    Qt.Key.Key_SysReq: 0x46,
    Qt.Key.Key_Clear: 0x53,
    Qt.Key.Key_Home: 0x4A,
    Qt.Key.Key_End: 0x4D,
    Qt.Key.Key_Left: 0x50,
    Qt.Key.Key_Up: 0x52,
    Qt.Key.Key_Right: 0x4F,
    Qt.Key.Key_Down: 0x51,
    Qt.Key.Key_PageUp: 0x4B,
    Qt.Key.Key_PageDown: 0x4E,
    Qt.Key.Key_Shift: 0xE1,
    Qt.Key.Key_Control: 0xE0,
    Qt.Key.Key_Meta: 0xE3,
    Qt.Key.Key_Alt: 0xE2,
    Qt.Key.Key_AltGr: 0xE6,
    Qt.Key.Key_CapsLock: 0x39,
    Qt.Key.Key_NumLock: 0x53,
    Qt.Key.Key_ScrollLock: 0x47,
    Qt.Key.Key_F1: 0x3A,
    Qt.Key.Key_F2: 0x3B,
    Qt.Key.Key_F3: 0x3C,
    Qt.Key.Key_F4: 0x3D,
    Qt.Key.Key_F5: 0x3E,
    Qt.Key.Key_F6: 0x3F,
    Qt.Key.Key_F7: 0x40,
    Qt.Key.Key_F8: 0x41,
    Qt.Key.Key_F9: 0x42,
    Qt.Key.Key_F10: 0x43,
    Qt.Key.Key_F11: 0x44,
    Qt.Key.Key_F12: 0x45,
    Qt.Key.Key_F13: 0x68,
    Qt.Key.Key_F14: 0x69,
    Qt.Key.Key_F15: 0x6A,
    Qt.Key.Key_F16: 0x6B,
    Qt.Key.Key_F17: 0x6C,
    Qt.Key.Key_F18: 0x6D,
    Qt.Key.Key_F19: 0x6E,
    Qt.Key.Key_F20: 0x6F,
    Qt.Key.Key_F21: 0x70,
    Qt.Key.Key_F22: 0x71,
    Qt.Key.Key_F23: 0x72,
    Qt.Key.Key_F24: 0x73,
    Qt.Key.Key_Super_L: 0xE3,
    Qt.Key.Key_Super_R: 0xE7,
    Qt.Key.Key_Menu: 0x76,
    Qt.Key.Key_Help: 0x75,
    Qt.Key.Key_Space: 0x2C,
    Qt.Key.Key_Any: 0x2C,
    Qt.Key.Key_Exclam: 0x1E,
    Qt.Key.Key_QuoteDbl: 0x34,
    Qt.Key.Key_NumberSign: 0x20,
    Qt.Key.Key_Percent: 0x22,
    Qt.Key.Key_Ampersand: 0x24,
    Qt.Key.Key_Apostrophe: 0x34,
    Qt.Key.Key_ParenLeft: 0x26,
    Qt.Key.Key_ParenRight: 0x27,
    Qt.Key.Key_Asterisk: 0x25,
    Qt.Key.Key_Plus: 0x57,
    Qt.Key.Key_Comma: 0x36,
    Qt.Key.Key_Minus: 0x2D,
    Qt.Key.Key_Period: 0x37,
    Qt.Key.Key_Slash: 0x38,
    # 数字键
    Qt.Key.Key_0: 0x27,
    Qt.Key.Key_1: 0x1E,
    Qt.Key.Key_2: 0x1F,
    Qt.Key.Key_3: 0x20,
    Qt.Key.Key_4: 0x21,
    Qt.Key.Key_5: 0x22,
    Qt.Key.Key_6: 0x23,
    Qt.Key.Key_7: 0x24,
    Qt.Key.Key_8: 0x25,
    Qt.Key.Key_9: 0x26,
    Qt.Key.Key_Colon: 0x33,
    Qt.Key.Key_Semicolon: 0x33,
    Qt.Key.Key_Less: 0x36,
    Qt.Key.Key_Equal: 0x2E,
    Qt.Key.Key_Greater: 0x37,
    Qt.Key.Key_Question: 0x38,
    Qt.Key.Key_At: 0x1F,
    # 字母
    Qt.Key.Key_A: 0x04,
    Qt.Key.Key_B: 0x05,
    Qt.Key.Key_C: 0x06,
    Qt.Key.Key_D: 0x07,
    Qt.Key.Key_E: 0x08,
    Qt.Key.Key_F: 0x09,
    Qt.Key.Key_G: 0x0A,
    Qt.Key.Key_H: 0x0B,
    Qt.Key.Key_I: 0x0C,
    Qt.Key.Key_J: 0x0D,
    Qt.Key.Key_K: 0x0E,
    Qt.Key.Key_L: 0x0F,
    Qt.Key.Key_M: 0x10,
    Qt.Key.Key_N: 0x11,
    Qt.Key.Key_O: 0x12,
    Qt.Key.Key_P: 0x13,
    Qt.Key.Key_Q: 0x14,
    Qt.Key.Key_R: 0x15,
    Qt.Key.Key_S: 0x16,
    Qt.Key.Key_T: 0x17,
    Qt.Key.Key_U: 0x18,
    Qt.Key.Key_V: 0x19,
    Qt.Key.Key_W: 0x1A,
    Qt.Key.Key_X: 0x1B,
    Qt.Key.Key_Y: 0x1C,
    Qt.Key.Key_Z: 0x1D,
    Qt.Key.Key_BracketLeft: 0x2F,
    Qt.Key.Key_Backslash: 0x31,
    Qt.Key.Key_BracketRight: 0x30,
    Qt.Key.Key_AsciiCircum: 0x23,
    Qt.Key.Key_Underscore: 0x2D,
    Qt.Key.Key_QuoteLeft: 0x35,
    Qt.Key.Key_BraceLeft: 0x2F,
    Qt.Key.Key_Bar: 0x31,
    Qt.Key.Key_BraceRight: 0x30,
    Qt.Key.Key_AsciiTilde: 0x35,
    Qt.Key.Key_nobreakspace: 0x2C,
    Qt.Key.Key_hyphen: 0x2D,
}

# dict[KeyCode: HID_CODE]
XCB_KEY_CODE_TO_HID_CODE: dict[int, int] = {
# Failed
0x00: 0x00,
# KeyA
0x26: 0x04,
# KeyB
0x38: 0x05,
# KeyC
0x36: 0x06,
# KeyD
0x28: 0x07,
# KeyE
0x1A: 0x08,
# KeyF
0x29: 0x09,
# KeyG
0x2A: 0x0A,
# KeyH
0x2B: 0x0B,
# KeyI
0x1F: 0x0C,
# KeyJ
0x2C: 0x0D,
# KeyK
0x2D: 0x0E,
# KeyL
0x2E: 0x0F,
# KeyM
0x3A: 0x10,
# KeyN
0x39: 0x11,
# KeyO
0x20: 0x12,
# KeyP
0x21: 0x13,
# KeyQ
0x18: 0x14,
# KeyR
0x1B: 0x15,
# KeyS
0x27: 0x16,
# KeyT
0x1C: 0x17,
# KeyU
0x1E: 0x18,
# KeyV
0x37: 0x19,
# KeyW
0x19: 0x1A,
# KeyX
0x35: 0x1B,
# KeyY
0x1D: 0x1C,
# KeyZ
0x34: 0x1D,
# Digit1
0xA: 0x1E,
# Digit2
0xB: 0x1F,
# Digit3
0xC: 0x20,
# Digit4
0xD: 0x21,
# Digit5
0xE: 0x22,
# Digit6
0xF: 0x23,
# Digit7
0x10: 0x24,
# Digit8
0x11: 0x25,
# Digit9
0x12: 0x26,
# Digit0
0x13: 0x27,
# Enter
0x24: 0x28,
# Escape
0x9: 0x29,
# Backspace
0x16: 0x2A,
# Tab
0x17: 0x2B,
# Space
0x41: 0x2C,
# Minus
0x14: 0x2D,
# Equal
0x15: 0x2E,
# BracketLeft
0x22: 0x2F,
# BracketRight
0x23: 0x30,
# Backslash
0x33: 0x31,
# Semicolon
0x2F: 0x33,
# Quote
0x30: 0x34,
# Backquote
0x31: 0x35,
# Comma
0x3B: 0x36,
# Period
0x3C: 0x37,
# Slash
0x3D: 0x38,
# CapsLock
0x42: 0x39,
# F1
0x43: 0x3A,
# F2
0x44: 0x3B,
# F3
0x45: 0x3C,
# F4
0x46: 0x3D,
# F5
0x47: 0x3E,
# F6
0x48: 0x3F,
# F7
0x49: 0x40,
# F8
0x4A: 0x41,
# F9
0x4B: 0x42,
# F10
0x4C: 0x43,
# F11
0x5F: 0x44,
# F12
0x60: 0x45,
# PrintScreen
0x6B: 0x46,
# ScrollLock
0x4E: 0x47,
# Pause
0x7F: 0x48,
# Insert
0x76: 0x49,
# Home
0x6E: 0x4A,
# PageUp
0x70: 0x4B,
# Delete
0x77: 0x4C,
# End
0x73: 0x4D,
# PageDown
0x75: 0x4E,
# ArrowRight
0x72: 0x4F,
# ArrowLeft
0x71: 0x50,
# ArrowDown
0x74: 0x51,
# ArrowUp
0x6F: 0x52,
# NumLock
0x4D: 0x53,
# NumpadDivide
0x6A: 0x54,
# NumpadMultiply
0x3F: 0x55,
# NumpadSubtract
0x52: 0x56,
# NumpadAdd
0x56: 0x57,
# NumpadEnter
0x68: 0x58,
# Numpad1
0x57: 0x59,
# Numpad2
0x58: 0x5A,
# Numpad3
0x59: 0x5B,
# Numpad4
0x53: 0x5C,
# Numpad5
0x54: 0x5D,
# Numpad6
0x55: 0x5E,
# Numpad7
0x4F: 0x5F,
# Numpad8
0x50: 0x60,
# Numpad9
0x51: 0x61,
# Numpad0
0x5A: 0x62,
# NumpadDecimal
0x5B: 0x63,
# IntlBackslash
0x5E: 0x64,
# ContextMenu
0x87: 0x65,
# Power
0x7C: 0x66,
# NumpadEqual
0x7D: 0x67,
# F13
0xBF: 0x68,
# F14
0xC0: 0x69,
# F15
0xC1: 0x6A,
# F16
0xC2: 0x6B,
# F17
0xC3: 0x6C,
# F18
0xC4: 0x6D,
# F19
0xC5: 0x6E,
# F20
0xC6: 0x6F,
# F21
0xC7: 0x70,
# F22
0xC8: 0x71,
# F23
0xC9: 0x72,
# F24
0xCA: 0x73,
# Open
0x8E: 0x74,
# Help
0x92: 0x75,
# Select
0x8C: 0x77,
# Again
0x89: 0x79,
# Undo
0x8B: 0x7A,
# Cut
0x91: 0x7B,
# Copy
0x8D: 0x7C,
# Paste
0x8F: 0x7D,
# Find
0x90: 0x7E,
# AudioVolumeMute
0x79: 0x7F,
# AudioVolumeUp
0x7B: 0x80,
# AudioVolumeDown
0x7A: 0x81,
# NumpadComma
0x81: 0x85,
# IntlRo
0x61: 0x87,
# KanaMode
0x65: 0x88,
# IntlYen
0x84: 0x89,
# Convert
0x64: 0x8A,
# NonConvert
0x66: 0x8B,
# Lang1
0x82: 0x90,
# Lang2
0x83: 0x91,
# Lang3
0x62: 0x92,
# Lang4
0x63: 0x93,
# Lang5
0x5D: 0x94,
# NumpadParenLeft
0xBB: 0xB6,
# NumpadParenRight
0xBC: 0xB7,
# NUMPAD_SIGN_CHANGE
0x7E: 0xD7,
# ControlLeft
0x25: 0xE0,
# ShiftLeft
0x32: 0xE1,
# AltLeft
0x40: 0xE2,
# MetaLeft
0x85: 0xE3,
# ControlRight
0x69: 0xE4,
# ShiftRight
0x3E: 0xE5,
# AltRight
0x6C: 0xE6,
# MetaRight
0x86: 0xE7,
}

# dict[VIRTUAL_KEY_CODE: HID_CODE]
MACOS_VIRTUAL_KEY_CODE_TO_HID_CODE: dict[int, int] = {
# Failed
# 0xffff: 0xffff,
# KeyA
0x0: 0x04,
# KeyB
0xB: 0x05,
# KeyC
0x8: 0x06,
# KeyD
0x2: 0x07,
# KeyE
0xE: 0x08,
# KeyF
0x3: 0x09,
# KeyG
0x5: 0x0A,
# KeyH
0x4: 0x0B,
# KeyI
0x22: 0x0C,
# KeyJ
0x26: 0x0D,
# KeyK
0x28: 0x0E,
# KeyL
0x25: 0x0F,
# KeyM
0x2E: 0x10,
# KeyN
0x2D: 0x11,
# KeyO
0x1F: 0x12,
# KeyP
0x23: 0x13,
# KeyQ
0xC: 0x14,
# KeyR
0xF: 0x15,
# KeyS
0x1: 0x16,
# KeyT
0x11: 0x17,
# KeyU
0x20: 0x18,
# KeyV
0x9: 0x19,
# KeyW
0xD: 0x1A,
# KeyX
0x7: 0x1B,
# KeyY
0x10: 0x1C,
# KeyZ
0x6: 0x1D,
# Digit1
0x12: 0x1E,
# Digit2
0x13: 0x1F,
# Digit3
0x14: 0x20,
# Digit4
0x15: 0x21,
# Digit5
0x17: 0x22,
# Digit6
0x16: 0x23,
# Digit7
0x1A: 0x24,
# Digit8
0x1C: 0x25,
# Digit9
0x19: 0x26,
# Digit0
0x1D: 0x27,
# Enter
0x24: 0x28,
# Escape
0x35: 0x29,
# Backspace
0x33: 0x2A,
# Tab
0x30: 0x2B,
# Space
0x31: 0x2C,
# Minus
0x1B: 0x2D,
# Equal
0x18: 0x2E,
# BracketLeft
0x21: 0x2F,
# BracketRight
0x1E: 0x30,
# Backslash
0x2A: 0x31,
# Semicolon
0x29: 0x33,
# Quote
0x27: 0x34,
# Backquote
0x32: 0x35,
# Comma
0x2B: 0x36,
# Period
0x2F: 0x37,
# Slash
0x2C: 0x38,
# CapsLock
0x39: 0x39,
# F1
0x7A: 0x3A,
# F2
0x78: 0x3B,
# F3
0x63: 0x3C,
# F4
0x76: 0x3D,
# F5
0x60: 0x3E,
# F6
0x61: 0x3F,
# F7
0x62: 0x40,
# F8
0x64: 0x41,
# F9
0x65: 0x42,
# F10
0x6D: 0x43,
# F11
0x67: 0x44,
# F12
0x6F: 0x45,
# Insert
0x72: 0x49,
# Home
0x73: 0x4A,
# PageUp
0x74: 0x4B,
# Delete
0x75: 0x4C,
# End
0x77: 0x4D,
# PageDown
0x79: 0x4E,
# ArrowRight
0x7C: 0x4F,
# ArrowLeft
0x7B: 0x50,
# ArrowDown
0x7D: 0x51,
# ArrowUp
0x7E: 0x52,
# NumLock
0x47: 0x53,
# NumpadDivide
0x4B: 0x54,
# NumpadMultiply
0x43: 0x55,
# NumpadSubtract
0x4E: 0x56,
# NumpadAdd
0x45: 0x57,
# NumpadEnter
0x4C: 0x58,
# Numpad1
0x53: 0x59,
# Numpad2
0x54: 0x5A,
# Numpad3
0x55: 0x5B,
# Numpad4
0x56: 0x5C,
# Numpad5
0x57: 0x5D,
# Numpad6
0x58: 0x5E,
# Numpad7
0x59: 0x5F,
# Numpad8
0x5B: 0x60,
# Numpad9
0x5C: 0x61,
# Numpad0
0x52: 0x62,
# NumpadDecimal
0x41: 0x63,
# IntlBackslash
0xA: 0x64,
# ContextMenu
0x6E: 0x65,
# NumpadEqual
0x51: 0x67,
# F13
0x69: 0x68,
# F14
0x6B: 0x69,
# F15
0x71: 0x6A,
# F16
0x6A: 0x6B,
# F17
0x40: 0x6C,
# F18
0x4F: 0x6D,
# F19
0x50: 0x6E,
# F20
0x5A: 0x6F,
# AudioVolumeMute
0x4A: 0x7F,
# AudioVolumeUp
0x48: 0x80,
# AudioVolumeDown
0x49: 0x81,
# NumpadComma
0x5F: 0x85,
# IntlRo
0x5E: 0x87,
# IntlYen
0x5D: 0x89,
# Lang1
0x68: 0x90,
# Lang2
0x66: 0x91,
# ControlLeft
0x3B: 0xE0,
# ShiftLeft
0x38: 0xE1,
# AltLeft
0x3A: 0xE2,
# MetaLeft
0x37: 0xE3,
# ControlRight
0x3E: 0xE4,
# ShiftRight
0x3C: 0xE5,
# AltRight
0x3D: 0xE6,
# MetaRight
0x36: 0xE7,
}

# dict[SCANCODE: HID_CODE]
WINDOWS_SCANCODE_TO_HID_CODE: dict[int, int] = {
# Failed
0x00: 0x00,
# USB_ERROR_ROLL_OVER
0xFF: 0x01,
# USB_POST_FAIL
0xFC: 0x02,
# KeyA
0x1E: 0x04,
# KeyB
0x30: 0x05,
# KeyC
0x2E: 0x06,
# KeyD
0x20: 0x07,
# KeyE
0x12: 0x08,
# KeyF
0x21: 0x09,
# KeyG
0x22: 0x0A,
# KeyH
0x23: 0x0B,
# KeyI
0x17: 0x0C,
# KeyJ
0x24: 0x0D,
# KeyK
0x25: 0x0E,
# KeyL
0x26: 0x0F,
# KeyM
0x32: 0x10,
# KeyN
0x31: 0x11,
# KeyO
0x18: 0x12,
# KeyP
0x19: 0x13,
# KeyQ
0x10: 0x14,
# KeyR
0x13: 0x15,
# KeyS
0x1F: 0x16,
# KeyT
0x14: 0x17,
# KeyU
0x16: 0x18,
# KeyV
0x2F: 0x19,
# KeyW
0x11: 0x1A,
# KeyX
0x2D: 0x1B,
# KeyY
0x15: 0x1C,
# KeyZ
0x2C: 0x1D,
# Digit1
0x2: 0x1E,
# Digit2
0x3: 0x1F,
# Digit3
0x4: 0x20,
# Digit4
0x5: 0x21,
# Digit5
0x6: 0x22,
# Digit6
0x7: 0x23,
# Digit7
0x8: 0x24,
# Digit8
0x9: 0x25,
# Digit9
0xA: 0x26,
# Digit0
0xB: 0x27,
# Enter
0x1C: 0x28,
# Escape
0x1: 0x29,
# Backspace
0xE: 0x2A,
# Tab
0xF: 0x2B,
# Space
0x39: 0x2C,
# Minus
0xC: 0x2D,
# Equal
0xD: 0x2E,
# BracketLeft
0x1A: 0x2F,
# BracketRight
0x1B: 0x30,
# Backslash
0x2B: 0x31,
# Semicolon
0x27: 0x33,
# Quote
0x28: 0x34,
# Backquote
0x29: 0x35,
# Comma
0x33: 0x36,
# Period
0x34: 0x37,
# Slash
0x35: 0x38,
# CapsLock
0x3A: 0x39,
# F1
0x3B: 0x3A,
# F2
0x3C: 0x3B,
# F3
0x3D: 0x3C,
# F4
0x3E: 0x3D,
# F5
0x3F: 0x3E,
# F6
0x40: 0x3F,
# F7
0x41: 0x40,
# F8
0x42: 0x41,
# F9
0x43: 0x42,
# F10
0x44: 0x43,
# F11
0x57: 0x44,
# F12
0x58: 0x45,
# PrintScreen
0xE037: 0x46,
# ScrollLock
0x46: 0x47,
# Pause
0x45: 0x48,
# Insert
0xE052: 0x49,
# Home
0xE047: 0x4A,
# PageUp
0xE049: 0x4B,
# Delete
0xE053: 0x4C,
# End
0xE04F: 0x4D,
# PageDown
0xE051: 0x4E,
# ArrowRight
0xE04D: 0x4F,
# ArrowLeft
0xE04B: 0x50,
# ArrowDown
0xE050: 0x51,
# ArrowUp
0xE048: 0x52,
# NumLock
0xE045: 0x53,
# NumpadDivide
0xE035: 0x54,
# NumpadMultiply
0x37: 0x55,
# NumpadSubtract
0x4A: 0x56,
# NumpadAdd
0x4E: 0x57,
# NumpadEnter
0xE01C: 0x58,
# Numpad1
0x4F: 0x59,
# Numpad2
0x50: 0x5A,
# Numpad3
0x51: 0x5B,
# Numpad4
0x4B: 0x5C,
# Numpad5
0x4C: 0x5D,
# Numpad6
0x4D: 0x5E,
# Numpad7
0x47: 0x5F,
# Numpad8
0x48: 0x60,
# Numpad9
0x49: 0x61,
# Numpad0
0x52: 0x62,
# NumpadDecimal
0x53: 0x63,
# IntlBackslash
0x56: 0x64,
# ContextMenu
0xE05D: 0x65,
# Power
0xE05E: 0x66,
# NumpadEqual
0x59: 0x67,
# F13
0x64: 0x68,
# F14
0x65: 0x69,
# F15
0x66: 0x6A,
# F16
0x67: 0x6B,
# F17
0x68: 0x6C,
# F18
0x69: 0x6D,
# F19
0x6A: 0x6E,
# F20
0x6B: 0x6F,
# F21
0x6C: 0x70,
# F22
0x6D: 0x71,
# F23
0x6E: 0x72,
# F24
0x76: 0x73,
# Help
0xE03B: 0x75,
# Undo
0xE008: 0x7A,
# Cut
0xE017: 0x7B,
# Copy
0xE018: 0x7C,
# Paste
0xE00A: 0x7D,
# AudioVolumeMute
0xE020: 0x7F,
# AudioVolumeUp
0xE030: 0x80,
# AudioVolumeDown
0xE02E: 0x81,
# NumpadComma
0x7E: 0x85,
# IntlRo
0x73: 0x87,
# KanaMode
0x70: 0x88,
# IntlYen
0x7D: 0x89,
# Convert
0x79: 0x8A,
# NonConvert
0x7B: 0x8B,
# Lang1
0x72: 0x90,
# Lang2
0x71: 0x91,
# Lang3
0x78: 0x92,
# Lang4
0x77: 0x93,
# ControlLeft
0x1D: 0xE0,
# ShiftLeft
0x2A: 0xE1,
# AltLeft
0x38: 0xE2,
# MetaLeft
0xE05B: 0xE3,
# ControlRight
0xE01D: 0xE4,
# ShiftRight
0x36: 0xE5,
# AltRight
0xE038: 0xE6,
# MetaRight
0xE05C: 0xE7,
}

"""
# 转换 Qt.Key 为 hid code
def convert_qt_key_value_to_hid_code(key_value: int) -> int:
    hid_code: int = QT_KEY_VALUE_TO_HID_CODE.get(key_value, 0xFFFFFFFF)
    return hid_code
"""

def qt_key_event_to_os_key_code(event: QKeyEvent) -> tuple[bool, int]:
    status: bool = True
    key_code: int = 0x00
    system_name: str = platform.system()
    if system_name == "Windows":
        key_code = event.nativeScanCode()
    elif system_name == "Linux":
        key_code = event.nativeScanCode()
    elif system_name == "Darwin":
        # MacOS 下 nativeScanCode() 无法正常工作
        # 选择使用 nativeVirtualKey() 替代
        key_code = event.nativeVirtualKey()
    else:
        status = False
        pass
    return status, key_code


def qt_key_code_to_hid_code(key_code: int) -> tuple[bool, int]:
    status: bool = False
    hid_code: int | None = None
    system_name: str = platform.system()
    if system_name == "Windows":
        hid_code = WINDOWS_SCANCODE_TO_HID_CODE.get(key_code, None)
    elif system_name == "Linux":
        hid_code = XCB_KEY_CODE_TO_HID_CODE.get(key_code, None)
    elif system_name == "Darwin":
        # MacOS
        hid_code = MACOS_VIRTUAL_KEY_CODE_TO_HID_CODE.get(key_code, None)
    else:
        # 不支持的OS
        pass

    if hid_code is not None:
        status = True
    else:
        hid_code = 0x00
    return status, hid_code


def qt_key_value_to_hid_code(key_code: int) -> tuple[bool, int]:
    status: bool = False
    hid_code: int | None = QT_KEY_VALUE_TO_HID_CODE.get(key_code, None)
    if hid_code is not None:
        status = True
    return status, hid_code


def qt_key_event_to_hid_code(event: QKeyEvent) -> tuple[bool, int]:
    # status: bool = False
    # hid_code: int = 0x00
    try:
        status, key_code = qt_key_event_to_os_key_code(event)
        if not status:
            raise RuntimeError("Unsupported OS")
        status, hid_code = qt_key_code_to_hid_code(key_code)
        if not status:
            raise RuntimeError("Hid code not found")
    except RuntimeError:
        status, hid_code = qt_key_value_to_hid_code(event.key())
    return status, hid_code


def os_scancode_code_to_hid_code(key_code: int) -> tuple[bool, int]:
    status: bool = False
    hid_code: int | None = None
    system_name: str = platform.system()
    if system_name == "Windows":
        hid_code = WINDOWS_SCANCODE_TO_HID_CODE.get(key_code, None)
    elif system_name == "Linux":
        hid_code = XCB_KEY_CODE_TO_HID_CODE.get(key_code, None)
    else:
        pass

    if hid_code is not None:
        status = True
    else:
        hid_code = 0x00
    return status, hid_code


if __name__ == "__main__":
    pass
